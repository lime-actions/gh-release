name: Tag Version
description: Create tag and update tags based on a version

inputs:
  draft:
    description: Whether to do a draft release
    required: false
  dry-run:
    description: Whether to not do any permanent changes
    required: false
  git-name:
    description: Name for the author of the tags
    required: false
    default: 'GitHub Actions'
  git-email:
    description: Email for the author of the tags
    required: false
    default: 'github-actions@users.noreply.github.com'
  latest-ref:
    description: Name of the reference to the latest-release
    required: false
    default: latest
  message:
    description: Annotated tag message
    required: false
    default: ''
  release-candidate:
    description: Whether this is a release candidate
    required: false
  release-candidate-suffix:
    description: Suffix to be used with release candidate tags
    required: false
    default: 'rc'
  version-from:
    description: Method of getting the version if not specified
    required: false
    type: choice
    options:
      - 'commit-message'
      - 'pyproject.toml'
      - 'version-file'
    default: 'commit-message'
  version-source:
    description: Source containing the version, e.g. path to a file
    required: false
    type: string
    default: ''
  token:
    description: Access token
    required: false
    type: string
    default: ${{ github.token }}
outputs:
  tag:
    description: Tag created
    value: ${{ steps.tag.outputs.tag }}
  message:
    description: Message on the tag
    value: ${{ steps.tag.outputs.message }}

runs:
  using: 'composite'
  steps:
  - name: Get version
    id: version
    uses: lime-actions/version@latest
    with:
      from: ${{ inputs.version-from }}
      source: ${{ inputs.version-source }}
  - name: Tag
    id: tag
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.token }}
      MESSAGE: ${{ inputs.message }}
    run: |
      # Handling tags
      echo "::group::Setting Git config"
      git config user.name ${{ inputs.git-name }}
      git config user.email ${{ inputs.git-email }}
      echo "::endgroup::"

      FULL_TAG="v${{ steps.version.outputs.version }}"
      ${{ inputs.version-from == 'commit-message'
          && !inputs.message
          &&
      'echo "::group::Getting tag message"
      MESSAGE="$(git log -1 --pretty=format:"%b")"
      echo "::endgroup::"'
          || '' }}

      ${{ inputs.release-candidate
          && format(
      'echo "::group::Getting available tag"
      N=1
      while git tag --list "$FULL_TAG.{0}$N" >/dev/null 2>&1; do
        echo $N
        ((N++))
      done

      FULL_TAG="$FULL_TAG.{0}$N"
      echo "::endgroup::"', inputs.release-candidate-suffix)
          || '' }}

      echo "tag=$FULL_TAG" >> "$GITHUB_OUTPUT"
      echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"


      echo "::group::Creating tag $FULL_TAG"
      git tag "$FULL_TAG" --message="$MESSAGE"
      echo "::endgroup::"

      echo "::group::Updating latest"
      git tag "${{ inputs.latest-ref
                  }}${{ inputs.release-candidate
                        && format('-{0}', inputs.release-candidate-suffix)
                        || '' }}" \
        --force --message="$MESSAGE"
      echo "::endgroup::"

      echo "::group::Updating higher level version tags"
      ${{ !inputs.release-candidate
          &&
      'TAG=$FULL_TAG;
      while
        TAG=$(sed -nE \
                --expression=''s/([^\.]+(\.[^\.]+)*)\.[^\.]+/\1/p'' \
              <<< "$TAG")
        [ -n "$TAG" ]
      do
        echo $TAG
        git tag "$TAG" --force
      done'
          || '' }}
      echo "::endgroup::"

      echo "::group::Pushing changes"
      git push origin --tags --force ${{ inputs.dry-run && '--dry-run' || '' }}
      echo "::endgroup::"
  - name: Release
    if: ${{ !inputs.dry-run }}
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.token }}
    run: |
      gh release create \
        "${{ steps.tag.outputs.tag }}" \
        --title "${{ steps.tag.outputs.tag }}" \
        --verify-tag \
        --notes-from-tag \
        ${{ inputs.release-candidate && '--prerelease \' || '' }}
        ${{ inputs.draft && '--draft \' || '' }}

branding:
  icon: 'package'
  color: 'green'
