name: PR from Version
run-name: PR ${{ inputs.head }} -> ${{ inputs.base }}

inputs:
  version-from:
    description: Method of getting the version
    required: true
    type: string

  version-path:
    description: Path to the file containing the version
    required: false
    type: string
    default: ''

  head:
    description: Source branch name
    required: false
    type: string
    default: ${{ github.ref_name }}

  base:
    description: Target branch name
    required: false
    type: string
    default: ${{ github.event.repository.default_branch }}

  prefix:
    description: PR prefix
    required: false
    type: string
    default: 'v'

runs:
  uses: 'composite'
  steps:
  - name: Prepare base ref
    id: refs
    env:
      GH_TOKEN: ${{ github.token }}
    shell: bash
    run: |
      BASE_NAME="${{ inputs.base }}"
      HEAD_NAME="${{ inputs.head }}"

      if [ $(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --head "$HEAD_NAME" \
              --base "$BASE_NAME" \
              --json title \
              --jq "length") != 0 ]; then
        echo "exists=true" >> "$GITHUB_OUTPUT"
      fi
  - name: Checkout
    if: ${{ steps.refs.outputs.base }}
    uses: actions/checkout@v4
    with:
      sparse-checkout: ${{ inputs.version-path }}
      sparse-checkout-cone-mode: false
  - name: Get version
    if: ${{ steps.refs.outputs.base }}
    id: version
    uses: lime-actions/version@latest
    with:
      from: ${{ inputs.version-from }}
      source: ${{ inputs.version-path }}
  - name: Create PR
    if: ${{ steps.refs.outputs.base }}
    env:
      GH_TOKEN: ${{ github.token }}
    shell: bash
    run: |
      gh pr create \
        --head "refs/heads/${{ inputs.head }}" \
        --base "refs/heads/${{ inputs.base }}" \
        --title "${{ inputs.prefix }}${{ steps.version.outputs.version }}" \
        --body "$(git log -1 --pretty=format:'%b')" \
        --draft
